

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/sismopro-website/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("admin")
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model BudgetRequest {
  id                String   @id @default(cuid())
  
  // Dados da Empresa
  companyName       String
  cnpj              String?
  contactName       String
  email             String
  phone             String
  
  // Dados do Projeto
  projectType       String
  location          String
  monitoringPeriod  String
  startDate         DateTime?
  endDate           DateTime?
  
  // Serviços de Interesse (JSON array)
  services          String[] // Array de strings para os serviços selecionados
  
  // Detalhes
  projectDetails    String?
  specialRequirements String?
  
  // Status e controle
  status            String   @default("pending") // pending, reviewed, contacted, closed
  priority          String   @default("normal") // low, normal, high, urgent
  notes             String?  // Notas internas da administração
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("budget_requests")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  position  String
  company   String
  industry  String
  rating    Int      @default(5)
  text      String
  active    Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

